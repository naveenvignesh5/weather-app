{"version":3,"sources":["components/AppBar/AppBar.js","components/SnackBar/SnackBar.js","config.js","components/WeatherCard/WeatherForcast/WeatherForcast.js","components/WeatherCard/WeatherCard.js","pages/Home/Home.js","utils/location.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","grow","flexGrow","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","spacing","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","formControl","margin","minWidth","select","AppBar","unit","handleUnitChange","classes","className","Toolbar","Typography","variant","noWrap","InputBase","placeholder","root","input","inputProps","FormControl","Select","id","defaultValue","value","onChange","outlined","MenuItem","Alert","props","elevation","SnackBar","type","handleClose","message","rest","Snackbar","onClose","severity","WEATHER_UNITS","standard","metric","imperial","desc","textTransform","temp","fontSize","fontWeight","WeatherForcast","latlng","useSWR","lat","lng","data","error","forcastData","get","Grid","container","map","index","dt","weatherData","icon","minTemp","maxTemp","item","xs","xl","key","direction","moment","format","alt","src","Box","mt","Divider","orientation","flexItem","marginBottom","subText","weatherIcon","WeatherCard","localTime","locationName","currentWeather","currentTemp","humidity","pressure","Card","CardContent","component","gutterBottom","Home","useState","setLalLng","setError","setUnit","open","Boolean","useEffect","cb","navigator","geolocation","getCurrentPosition","pos","err","console","log","getLocation","coords","latitude","longitude","e","target","p","App","fetcher","fetch","then","res","json","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2c72ce99.chunk.js","sourcesContent":["import React from 'react';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport MuiAppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst useStyles = makeStyles((theme) => ({\n  grow: {\n    flexGrow: 1,\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  select: {\n    backgroundColor: '#fff',\n  },\n}));\n\nexport function AppBar({ unit, handleUnitChange }) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.grow}>\n      <MuiAppBar position=\"static\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Weather App\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Search Location\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n            />\n          </div>\n          <Typography className={classes.title} variant=\"subtitle1\" noWrap>\n            Unit\n          </Typography>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <Select\n              id=\"demo-simple-select-outlined\"\n              defaultValue=\"standard\"\n              value={unit}\n              onChange={handleUnitChange}\n              classes={{\n                root: classes.select,\n                outlined: classes.select,\n              }}\n            >\n              <MenuItem value=\"standard\">Standard</MenuItem>\n              <MenuItem value=\"metric\">Metric</MenuItem>\n              <MenuItem value=\"imperial\">Imperial</MenuItem>\n            </Select>\n          </FormControl>\n          <div className={classes.grow} />\n        </Toolbar>\n      </MuiAppBar>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport function SnackBar({ type, handleClose, message, ...rest }) {\n  return (\n    <Snackbar {...rest}>\n      <Alert onClose={handleClose} severity={type}>\n        {message}\n      </Alert>\n    </Snackbar>\n  );\n}\n","export const WEATHER_STACK_API_KEY = '01dbc6f376226b6537d5ee27257514eb';\nexport const WEATHER_STACK_API = 'https://api.openweathermap.org/data/2.5';\nexport const WEATHER_UNITS = {\n  standard: 'K',\n  metric: '°C',\n  imperial: '°F',\n};\n","import React from 'react';\nimport get from 'lodash/get';\nimport moment from 'moment';\nimport useSWR from 'swr';\n\n// material ui\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\n\n// api\nimport {\n  WEATHER_STACK_API,\n  WEATHER_STACK_API_KEY,\n  WEATHER_UNITS,\n} from '../../../config';\n\nconst useStyles = makeStyles({\n  desc: {\n    textTransform: 'capitalize',\n  },\n  temp: {\n    fontSize: 12,\n    fontWeight: 700,\n  },\n});\n\nexport function WeatherForcast({ latlng, unit = 'standard' }) {\n  const classes = useStyles();\n\n  const { data, error } = useSWR(\n    `${WEATHER_STACK_API}/onecall?lat=${latlng.lat}&lon=${latlng.lng}&appid=${WEATHER_STACK_API_KEY}&units=${unit}`\n  );\n\n  if (!data) return null;\n\n  if (error) return `Error: ${error.message}`;\n\n  const forcastData = get(data, 'daily', []);\n\n  return (\n    <Grid container>\n      {forcastData.map(function (data, index) {\n        const dt = get(data, 'dt') * 1000;\n        const weatherData = get(data, ['weather', '0'], {});\n        const desc = get(weatherData, 'description', '');\n        const icon = get(weatherData, 'icon', '');\n\n        const minTemp = get(data, ['temp', 'min'], 0);\n        const maxTemp = get(data, ['temp', 'max'], 0);\n\n        return (\n          <Grid\n            container\n            item\n            xs\n            xl\n            key={`forcast-${get(data, 'dt')}-${index}`}\n            direction=\"column\"\n            alignItems=\"center\"\n          >\n            <Typography variant=\"h5\">{moment(dt).format('dddd')}</Typography>\n            <img\n              alt={desc}\n              src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n            />\n            <Typography classes={{ root: classes.desc }} color=\"textSecondary\">\n              {desc}\n            </Typography>\n            <Box display=\"flex\" mt={2}>\n              <Typography classes={{ root: classes.temp }} variant=\"subtitle1\">\n                {maxTemp} {WEATHER_UNITS[unit]}\n              </Typography>\n              <Divider orientation=\"vertical\" flexItem variant=\"middle\" />\n              <Typography classes={{ root: classes.temp }} variant=\"subtitle1\">\n                {minTemp} {WEATHER_UNITS[unit]}\n              </Typography>\n            </Box>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n}\n","import React from 'react';\nimport get from 'lodash/get';\nimport moment from 'moment';\nimport useSWR from 'swr';\n\n// material ui\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n// import Box from '@material-ui/core/Box';\n\n// components\nimport { WeatherForcast } from './WeatherForcast';\n\n// api\nimport {\n  WEATHER_STACK_API,\n  WEATHER_STACK_API_KEY,\n  WEATHER_UNITS,\n} from '../../config';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    marginBottom: 10,\n  },\n  subText: {\n    fontSize: 14,\n  },\n  weatherIcon: {\n    marginLeft: 10,\n    width: 100,\n    height: 100,\n  },\n  desc: {\n    textTransform: 'capitalize',\n    fontSize: 20,\n  },\n});\n\nexport function WeatherCard({ latlng, unit }) {\n  const classes = useStyles();\n\n  const { data, error } = useSWR(\n    `${WEATHER_STACK_API}/weather?lat=${latlng.lat}&lon=${latlng.lng}&appid=${WEATHER_STACK_API_KEY}&units=${unit}`\n  );\n\n  if (!data) return null;\n\n  if (error) return `Error: ${error.message}`;\n\n  const localTime = get(data, 'dt') * 1000;\n\n  const locationName = get(data, 'name');\n\n  const currentWeather = get(data, ['weather', '0'], {});\n  const desc = get(currentWeather, 'description', '');\n\n  const currentTemp = get(data, ['main', 'temp'], 0);\n  const humidity = get(data, ['main', 'humidity'], 0);\n  const pressure = get(data, ['main', 'pressure'], 0);\n\n  const icon = get(currentWeather, 'icon', '');\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xs={2} xl={2}>\n              <Typography variant=\"h5\" component=\"h2\">\n                {locationName}\n              </Typography>\n              {icon && (\n                <img\n                  className={classes.weatherIcon}\n                  alt=\"weather_icon\"\n                  src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n                />\n              )}\n              <Typography\n                classes={{ root: classes.subText }}\n                color=\"textSecondary\"\n              >\n                {moment(localTime).format('LLL')}\n              </Typography>\n              <Typography classes={{ root: classes.desc }} variant=\"subtitle2\">\n                {desc}\n              </Typography>\n            </Grid>\n            <Grid item xs xl>\n              <Typography variant=\"h6\">Temperature</Typography>\n              <Typography\n                gutterBottom\n                variant=\"subtitle1\"\n                color=\"textSecondary\"\n              >\n                {currentTemp} {WEATHER_UNITS[unit]}\n              </Typography>\n              <Typography variant=\"h6\">Humidity</Typography>\n              <Typography\n                gutterBottom\n                variant=\"subtitle1\"\n                color=\"textSecondary\"\n              >\n                {humidity} %\n              </Typography>\n              <Typography variant=\"h6\">Pressure</Typography>\n              <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                {pressure} hPa\n              </Typography>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardContent>\n          <WeatherForcast unit={unit} latlng={latlng} />\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport Box from '@material-ui/core/Box';\n\n// components\nimport { AppBar, SnackBar, WeatherCard } from '../../components';\n\n// utils\nimport { getLocation } from '../../utils';\n\nexport function Home() {\n  const [latlng, setLalLng] = useState({ lat: 40.7128, lng: 74.006 });\n  const [error, setError] = useState('');\n  const [unit, setUnit] = useState('standard');\n\n  const open = Boolean(error);\n\n  useEffect(() => {\n    getLocation(function (err, data) {\n      if (err) {\n        console.log(err);\n        setError(err.message);\n        return;\n      }\n\n      console.log(data);\n\n      setLalLng({\n        lat: data.coords.latitude,\n        lng: data.coords.longitude,\n      });\n    });\n  }, []);\n\n  return (\n    <>\n      <AppBar unit={unit} handleUnitChange={(e) => setUnit(e.target.value)} />\n      <Box p={3}>\n        <WeatherCard unit={unit} latlng={latlng} />\n      </Box>\n      <SnackBar\n        open={open}\n        message={error}\n        type=\"error\"\n        handleClose={() => setError('')}\n      />\n    </>\n  );\n}\n","export function getLocation(cb) {\n  try {\n    if (!navigator.geolocation) {\n      cb('Not supported', null);\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(function (pos, err) {\n      console.log(err);\n      cb(err, pos);\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n","import React from 'react';\nimport { SWRConfig } from 'swr';\nimport { Home } from './pages';\n\nfunction App() {\n  return (\n    <SWRConfig\n      value={{ fetcher: (...args) => fetch(...args).then((res) => res.json()) }}\n    >\n      <Home />\n    </SWRConfig>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}