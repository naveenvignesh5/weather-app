{"version":3,"sources":["config.js","components/LocationSearch/LocationSearch.js","components/AppBar/AppBar.js","components/SnackBar/SnackBar.js","components/WeatherCard/WeatherForcast/WeatherForcast.js","components/WeatherCard/WeatherCard.js","pages/Home/Home.js","utils/location.js","App.js","serviceWorker.js","index.js"],"names":["WEATHER_UNITS","standard","metric","imperial","useStyles","makeStyles","theme","textFieldRoot","backgroundColor","palette","common","white","borderRadius","LocationSearch","handleLocationChange","classes","useState","query","setQuery","data","useSWR","Autocomplete","freeSolo","onChange","e","v","options","get","getOptionLabel","option","place_name","style","width","loading","renderInput","params","TextField","margin","variant","root","placeholder","value","target","defaultProps","grow","flexGrow","title","display","breakpoints","up","search","position","shape","fade","marginRight","spacing","marginLeft","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","formControlLabel","fontWeight","formControl","minWidth","select","AppBar","unit","handleUnitChange","className","Toolbar","Typography","noWrap","FormControl","Select","id","defaultValue","outlined","MenuItem","Alert","props","elevation","SnackBar","type","handleClose","message","rest","Snackbar","onClose","severity","desc","textTransform","temp","fontSize","WeatherForcast","latlng","lat","lng","error","forcastData","Grid","container","map","index","dt","weatherData","icon","minTemp","maxTemp","day","moment","format","item","xs","xl","key","direction","alt","src","Box","mt","Divider","orientation","flexItem","marginBottom","subText","weatherIcon","WeatherCard","localTime","locationName","currentWeather","currentTemp","humidity","pressure","Card","CardContent","component","gutterBottom","Home","setLalLng","setError","setUnit","open","Boolean","useEffect","cb","navigator","geolocation","getCurrentPosition","pos","err","console","log","getLocation","coords","latitude","longitude","p","App","fetcher","fetch","then","res","json","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b1157d08.chunk.js","sourcesContent":["export const WEATHER_STACK_API_KEY = '01dbc6f376226b6537d5ee27257514eb';\nexport const WEATHER_STACK_API = 'https://api.openweathermap.org/data/2.5';\nexport const WEATHER_UNITS = {\n  standard: 'K',\n  metric: '°C',\n  imperial: '°F',\n};\n\nexport const MAPBOX_API = 'https://api.mapbox.com';\nexport const MAPBOX_ACCESS_TOKEN =\n  'pk.eyJ1IjoibmF2ZWVudmlnbmVzaCIsImEiOiJja2dhZzQybzkwNnRjMnFvNGkzb3NqbHFuIn0.B2bWiXlcPGLGJ1H2JfdUAg';\n","import React, { useState } from 'react';\n\nimport useSWR from 'swr';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\nimport get from 'lodash/get';\n\n// config\nimport { MAPBOX_API, MAPBOX_ACCESS_TOKEN } from '../../config';\n\nconst useStyles = makeStyles((theme) => ({\n  textFieldRoot: {\n    backgroundColor: theme.palette.common.white,\n    borderRadius: 4,\n  },\n}));\n\nexport function LocationSearch({ handleLocationChange }) {\n  const classes = useStyles();\n\n  const [query, setQuery] = useState('');\n\n  const { data } = useSWR(\n    `${MAPBOX_API}/geocoding/v5/mapbox.places/${query}.json?access_token=${MAPBOX_ACCESS_TOKEN}`\n  );\n\n  return (\n    <Autocomplete\n      freeSolo\n      onChange={(e, v) => handleLocationChange(v)}\n      options={get(data, ['features'], [])}\n      getOptionLabel={(option) => option.place_name}\n      style={{ width: 500 }}\n      loading={!data}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          margin=\"normal\"\n          variant=\"outlined\"\n          classes={{ root: classes.textFieldRoot }}\n          placeholder=\"Enter location\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        />\n      )}\n    />\n  );\n}\n\nLocationSearch.defaultProps = {\n  handleLocationChange: () => {},\n};\n","import React from 'react';\nimport { fade, makeStyles } from '@material-ui/core/styles';\n\n// material ui\nimport MuiAppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n// components\nimport { LocationSearch } from '../LocationSearch';\n\nconst useStyles = makeStyles((theme) => ({\n  grow: {\n    flexGrow: 1,\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n  formControlLabel: {\n    marginLeft: theme.spacing(3),\n    fontWeight: 700,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  select: {\n    backgroundColor: '#fff',\n    borderRadius: 4,\n  },\n}));\n\nexport function AppBar({ unit, handleUnitChange, handleLocationChange }) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.grow}>\n      <MuiAppBar position=\"static\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Weather App\n          </Typography>\n          <Typography\n            className={classes.formControlLabel}\n            variant=\"subtitle1\"\n            noWrap\n          >\n            Unit\n          </Typography>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <Select\n              id=\"demo-simple-select-outlined\"\n              defaultValue=\"standard\"\n              value={unit}\n              onChange={handleUnitChange}\n              classes={{\n                root: classes.select,\n                outlined: classes.select,\n              }}\n            >\n              <MenuItem value=\"standard\">Standard</MenuItem>\n              <MenuItem value=\"metric\">Metric</MenuItem>\n              <MenuItem value=\"imperial\">Imperial</MenuItem>\n            </Select>\n          </FormControl>\n          <div className={classes.grow} />\n          <LocationSearch handleLocationChange={handleLocationChange} />\n          {/* <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n\n            <InputBase\n              id=\"autocomplete\"\n              placeholder=\"Search Location\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n            />\n          </div> */}\n        </Toolbar>\n      </MuiAppBar>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport function SnackBar({ type, handleClose, message, ...rest }) {\n  return (\n    <Snackbar {...rest}>\n      <Alert onClose={handleClose} severity={type}>\n        {message}\n      </Alert>\n    </Snackbar>\n  );\n}\n","import React from 'react';\nimport get from 'lodash/get';\nimport moment from 'moment';\nimport useSWR from 'swr';\n\n// material ui\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\n\n// api\nimport {\n  WEATHER_STACK_API,\n  WEATHER_STACK_API_KEY,\n  WEATHER_UNITS,\n} from '../../../config';\n\nconst useStyles = makeStyles({\n  desc: {\n    textTransform: 'capitalize',\n  },\n  temp: {\n    fontSize: 12,\n    fontWeight: 700,\n  },\n});\n\nexport function WeatherForcast({ latlng, unit = 'standard' }) {\n  const classes = useStyles();\n\n  const { data, error } = useSWR(\n    `${WEATHER_STACK_API}/onecall?lat=${latlng.lat}&lon=${latlng.lng}&appid=${WEATHER_STACK_API_KEY}&units=${unit}`\n  );\n\n  if (!data) return null;\n\n  if (error) return `Error: ${error.message}`;\n\n  const forcastData = get(data, 'daily', []);\n\n  return (\n    <Grid container>\n      {forcastData.map(function (data, index) {\n        const dt = get(data, 'dt') * 1000;\n        const weatherData = get(data, ['weather', '0'], {});\n        const desc = get(weatherData, 'description', '');\n        const icon = get(weatherData, 'icon', '');\n\n        const minTemp = get(data, ['temp', 'min'], 0);\n        const maxTemp = get(data, ['temp', 'max'], 0);\n\n        let day = `${moment(dt).format('dddd')}`;\n\n        if (index === 0) {\n          day = 'Today';\n        }\n\n        if (index === 1) {\n          day = 'Tomorrow';\n        }\n\n        return (\n          <Grid\n            container\n            item\n            xs\n            xl\n            key={`forcast-${get(data, 'dt')}-${index}`}\n            direction=\"column\"\n            alignItems=\"center\"\n          >\n            <Typography variant=\"h5\">{day}</Typography>\n            <img\n              alt={desc}\n              src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n            />\n            <Typography classes={{ root: classes.desc }} color=\"textSecondary\">\n              {desc}\n            </Typography>\n            <Box display=\"flex\" mt={2}>\n              <Typography classes={{ root: classes.temp }} variant=\"subtitle1\">\n                {maxTemp} {WEATHER_UNITS[unit]}\n              </Typography>\n              <Divider orientation=\"vertical\" flexItem variant=\"middle\" />\n              <Typography classes={{ root: classes.temp }} variant=\"subtitle1\">\n                {minTemp} {WEATHER_UNITS[unit]}\n              </Typography>\n            </Box>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n}\n","import React from 'react';\nimport get from 'lodash/get';\nimport moment from 'moment';\nimport useSWR from 'swr';\n\n// material ui\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\n// components\nimport { WeatherForcast } from './WeatherForcast';\n\n// api\nimport {\n  WEATHER_STACK_API,\n  WEATHER_STACK_API_KEY,\n  WEATHER_UNITS,\n} from '../../config';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    marginBottom: 10,\n  },\n  subText: {\n    fontSize: 14,\n  },\n  weatherIcon: {\n    marginLeft: 10,\n    width: 100,\n    height: 100,\n  },\n  desc: {\n    textTransform: 'capitalize',\n    fontSize: 20,\n  },\n});\n\nexport function WeatherCard({ latlng, unit }) {\n  const classes = useStyles();\n\n  const lat = get(latlng, 'lat', null);\n  const lng = get(latlng, 'lng', null);\n\n  const { data, error } = useSWR(\n    `${WEATHER_STACK_API}/weather?appid=${WEATHER_STACK_API_KEY}&lat=${lat}&lon=${lng}&units=${unit}`\n  );\n\n  if (lat === null || lng === null) {\n    return null;\n  }\n\n  if (!data) return null;\n\n  if (error) return `Error: ${error.message}`;\n\n  const localTime = get(data, 'dt') * 1000;\n\n  const locationName = get(data, 'name');\n\n  const currentWeather = get(data, ['weather', '0'], {});\n  const desc = get(currentWeather, 'description', '');\n\n  const currentTemp = get(data, ['main', 'temp'], 0);\n  const humidity = get(data, ['main', 'humidity'], 0);\n  const pressure = get(data, ['main', 'pressure'], 0);\n\n  const icon = get(currentWeather, 'icon', '');\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xs={2} xl={2}>\n              <Typography variant=\"h5\" component=\"h2\">\n                {locationName}\n              </Typography>\n              {icon && (\n                <img\n                  className={classes.weatherIcon}\n                  alt=\"weather_icon\"\n                  src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n                />\n              )}\n              <Typography\n                classes={{ root: classes.subText }}\n                color=\"textSecondary\"\n              >\n                {moment(localTime).format('LLL')}\n              </Typography>\n              <Typography classes={{ root: classes.desc }} variant=\"subtitle2\">\n                {desc}\n              </Typography>\n            </Grid>\n            <Grid item xs xl>\n              <Typography variant=\"h6\">Temperature</Typography>\n              <Typography\n                gutterBottom\n                variant=\"subtitle1\"\n                color=\"textSecondary\"\n              >\n                {currentTemp} {WEATHER_UNITS[unit]}\n              </Typography>\n              <Typography variant=\"h6\">Humidity</Typography>\n              <Typography\n                gutterBottom\n                variant=\"subtitle1\"\n                color=\"textSecondary\"\n              >\n                {humidity} %\n              </Typography>\n              <Typography variant=\"h6\">Pressure</Typography>\n              <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                {pressure} hPa\n              </Typography>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardContent>\n          <WeatherForcast unit={unit} latlng={latlng} />\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\n// material\nimport Box from '@material-ui/core/Box';\n\n// lodash\nimport get from 'lodash/get';\n\n// components\nimport { AppBar, SnackBar, WeatherCard } from '../../components';\n\n// utils\nimport { getLocation } from '../../utils';\n\nexport function Home() {\n  const [latlng, setLalLng] = useState({});\n  const [error, setError] = useState('');\n  const [unit, setUnit] = useState('standard');\n\n  const open = Boolean(error);\n\n  useEffect(() => {\n    getLocation(function (err, data) {\n      if (err) {\n        console.log(err);\n        setError(err.message);\n        return;\n      }\n\n      setLalLng({\n        lat: data.coords.latitude,\n        lng: data.coords.longitude,\n      });\n    });\n  }, []);\n\n  return (\n    <>\n      <AppBar\n        unit={unit}\n        handleUnitChange={(e) => setUnit(e.target.value)}\n        handleLocationChange={(v) =>\n          setLalLng({ lng: get(v, ['center', 0]), lat: get(v, ['center', 1]) })\n        }\n      />\n      <Box p={3}>\n        <WeatherCard unit={unit} latlng={latlng} />\n      </Box>\n      <SnackBar\n        open={open}\n        message={error}\n        type=\"error\"\n        handleClose={() => setError('')}\n      />\n    </>\n  );\n}\n","export function getLocation(cb) {\n  try {\n    if (!navigator.geolocation) {\n      cb('Not supported', null);\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(function (pos, err) {\n      console.log(err);\n      cb(err, pos);\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n","import React from 'react';\nimport { SWRConfig } from 'swr';\nimport { Home } from './pages';\n\nfunction App() {\n  return (\n    <SWRConfig\n      value={{ fetcher: (...args) => fetch(...args).then((res) => res.json()) }}\n    >\n      <Home />\n    </SWRConfig>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}